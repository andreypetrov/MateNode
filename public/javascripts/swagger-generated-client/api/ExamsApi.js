/**
 * Mate Exam API
 * A simple API to give test exams to students. Flow for an exam is like so: 1. Pick a student. 2. Pick an exam. 3. Create result for chosen student and exam. 4. Answer questions. 5. Finish result.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Exam'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Exam'));
  } else {
    // Browser globals (root is window)
    if (!root.MateExamApi) {
      root.MateExamApi = {};
    }
    root.MateExamApi.ExamsApi = factory(root.MateExamApi.ApiClient, root.MateExamApi.Exam);
  }
}(this, function(ApiClient, Exam) {
  'use strict';

  /**
   * Exams service.
   * @module api/ExamsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ExamsApi. 
   * @alias module:api/ExamsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new exam
     * @param {module:model/Exam} body Exam object that needs to be created. _id does not need to be provided. If not provided it will be generated server side and returned in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Exam} and HTTP response
     */
    this.createExamWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createExam");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exam;

      return this.apiClient.callApi(
        '/exams', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new exam
     * @param {module:model/Exam} body Exam object that needs to be created. _id does not need to be provided. If not provided it will be generated server side and returned in the response.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Exam}
     */
    this.createExam = function(body) {
      return this.createExamWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a exam by id
     * @param {String} id ID of exam to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.deleteExamByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteExamById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/exams/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a exam by id
     * @param {String} id ID of exam to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.deleteExamById = function(id) {
      return this.deleteExamByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an exam by id
     * @param {String} id ID of exam to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Exam} and HTTP response
     */
    this.getExamByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExamById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Exam;

      return this.apiClient.callApi(
        '/exams/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an exam by id
     * @param {String} id ID of exam to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Exam}
     */
    this.getExamById = function(id) {
      return this.getExamByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of exams. Optionally filter by subjectCode and variant
     * @param {Object} opts Optional parameters
     * @param {String} opts.subjectCode The subject code of the exam
     * @param {String} opts.variant The variant of the exam on the given subject
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Exam>} and HTTP response
     */
    this.getExamsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'subjectCode': opts['subjectCode'],
        'variant': opts['variant'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Exam];

      return this.apiClient.callApi(
        '/exams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get list of exams. Optionally filter by subjectCode and variant
     * @param {Object} opts Optional parameters
     * @param {String} opts.subjectCode The subject code of the exam
     * @param {String} opts.variant The variant of the exam on the given subject
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Exam>}
     */
    this.getExams = function(opts) {
      return this.getExamsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
