/**
 * Mate Exam API
 * A simple API to give test exams to students. Flow for an exam is like so: 1. Pick a student. 2. Pick an exam. 3. Create result for chosen student and exam. 4. Answer questions. 5. Finish result.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AnswerRequest', 'model/FinishResultRequest', 'model/Result', 'model/StartResultRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AnswerRequest'), require('../model/FinishResultRequest'), require('../model/Result'), require('../model/StartResultRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.MateExamApi) {
      root.MateExamApi = {};
    }
    root.MateExamApi.ResultsApi = factory(root.MateExamApi.ApiClient, root.MateExamApi.AnswerRequest, root.MateExamApi.FinishResultRequest, root.MateExamApi.Result, root.MateExamApi.StartResultRequest);
  }
}(this, function(ApiClient, AnswerRequest, FinishResultRequest, Result, StartResultRequest) {
  'use strict';

  /**
   * Results service.
   * @module api/ResultsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ResultsApi. 
   * @alias module:api/ResultsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new result and timestamp the moment the exam started
     * @param {module:model/StartResultRequest} body id of student and id of exam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    this.createResultWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createResult");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Result;

      return this.apiClient.callApi(
        '/results', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new result and timestamp the moment the exam started
     * @param {module:model/StartResultRequest} body id of student and id of exam
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    this.createResult = function(body) {
      return this.createResultWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a result by id
     * @param {String} id ID of result to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.deleteResultByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteResultById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/results/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a result by id
     * @param {String} id ID of result to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.deleteResultById = function(id) {
      return this.deleteResultByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a result by id
     * @param {String} id ID of result to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    this.getResultByIdWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResultById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Result;

      return this.apiClient.callApi(
        '/results/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a result by id
     * @param {String} id ID of result to return
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    this.getResultById = function(id) {
      return this.getResultByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get list of results. Optionally filter by examId, studentId, studentName, examSubjectCode, and examVariant
     * @param {Object} opts Optional parameters
     * @param {String} opts.examSubjectCode The subject code of the exam
     * @param {String} opts.examVariant The variant of the exam on the given subject
     * @param {String} opts.examId The id of the exam
     * @param {String} opts.studentId The id of the student who is taking the exam and who this result record belongs to
     * @param {String} opts.studentName The name of the student who is taking the exam and who this result record belongs to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Result>} and HTTP response
     */
    this.getResultsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'examSubjectCode': opts['examSubjectCode'],
        'examVariant': opts['examVariant'],
        'examId': opts['examId'],
        'studentId': opts['studentId'],
        'studentName': opts['studentName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Result];

      return this.apiClient.callApi(
        '/results', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get list of results. Optionally filter by examId, studentId, studentName, examSubjectCode, and examVariant
     * @param {Object} opts Optional parameters
     * @param {String} opts.examSubjectCode The subject code of the exam
     * @param {String} opts.examVariant The variant of the exam on the given subject
     * @param {String} opts.examId The id of the exam
     * @param {String} opts.studentId The id of the student who is taking the exam and who this result record belongs to
     * @param {String} opts.studentName The name of the student who is taking the exam and who this result record belongs to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Result>}
     */
    this.getResults = function(opts) {
      return this.getResultsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Answer a question from the exam and record it in the result record
     * @param {module:model/AnswerRequest} body id of result, id of question asked and id of answer given
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    this.giveAnswerInResultWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling giveAnswerInResult");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Result;

      return this.apiClient.callApi(
        '/results/answer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Answer a question from the exam and record it in the result record
     * @param {module:model/AnswerRequest} body id of result, id of question asked and id of answer given
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    this.giveAnswerInResult = function(body) {
      return this.giveAnswerInResultWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Finish exam and close result record (i.e. timestamp and score it)
     * @param {module:model/FinishResultRequest} body id of result to be finished. This means exam  for this student is over.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FinishResultRequest} and HTTP response
     */
    this.giveAnswerInResult_0WithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling giveAnswerInResult_0");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FinishResultRequest;

      return this.apiClient.callApi(
        '/results/finish', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Finish exam and close result record (i.e. timestamp and score it)
     * @param {module:model/FinishResultRequest} body id of result to be finished. This means exam  for this student is over.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FinishResultRequest}
     */
    this.giveAnswerInResult_0 = function(body) {
      return this.giveAnswerInResult_0WithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
