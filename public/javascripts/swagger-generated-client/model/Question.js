/**
 * Mate Exam API
 * A simple API to give test exams to students. Flow for an exam is like so: 1. Pick a student. 2. Pick an exam. 3. Create result for chosen student and exam. 4. Answer questions. 5. Finish result.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Answer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Answer'));
  } else {
    // Browser globals (root is window)
    if (!root.MateExamApi) {
      root.MateExamApi = {};
    }
    root.MateExamApi.Question = factory(root.MateExamApi.ApiClient, root.MateExamApi.Answer);
  }
}(this, function(ApiClient, Answer) {
  'use strict';




  /**
   * The Question model module.
   * @module model/Question
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Question</code>.
   * @alias module:model/Question
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>Question</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Question} obj Optional instance to populate.
   * @return {module:model/Question} The populated <code>Question</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('_id')) {
        obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
      }
      if (data.hasOwnProperty('text')) {
        obj['text'] = ApiClient.convertToType(data['text'], 'String');
      }
      if (data.hasOwnProperty('correctAnswer')) {
        obj['correctAnswer'] = ApiClient.convertToType(data['correctAnswer'], 'String');
      }
      if (data.hasOwnProperty('givenAnswer')) {
        obj['givenAnswer'] = ApiClient.convertToType(data['givenAnswer'], 'String');
      }
      if (data.hasOwnProperty('answers')) {
        obj['answers'] = ApiClient.convertToType(data['answers'], [Answer]);
      }
    }
    return obj;
  }

  /**
   * @member {String} _id
   */
  exports.prototype['_id'] = undefined;
  /**
   * The text of the actual question
   * @member {String} text
   */
  exports.prototype['text'] = undefined;
  /**
   * The id (usually letter) of the correct answer
   * @member {String} correctAnswer
   */
  exports.prototype['correctAnswer'] = undefined;
  /**
   * The id (usually letter) of the given answer by the student. This is empty when part of exam but gets filled in when part of result.
   * @member {String} givenAnswer
   */
  exports.prototype['givenAnswer'] = undefined;
  /**
   * @member {Array.<module:model/Answer>} answers
   */
  exports.prototype['answers'] = undefined;



  return exports;
}));


